; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc %s -O0 -mtriple=x86_64-unknown-unknown -mattr=+avx512f -o - | FileCheck %s

declare fastcc <38 x double> @test()

define void @pr34653() {
; CHECK-LABEL: pr34653:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rbp
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset %rbp, -16
; CHECK-NEXT:    movq %rsp, %rbp
; CHECK-NEXT:    .cfi_def_cfa_register %rbp
; CHECK-NEXT:    andq $-512, %rsp # imm = 0xFE00
; CHECK-NEXT:    subq $1536, %rsp # imm = 0x600
; CHECK-NEXT:    leaq {{[0-9]+}}(%rsp), %rdi
; CHECK-NEXT:    callq test
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm0
; CHECK-NEXT:    vmovaps %xmm0, %xmm1
; CHECK-NEXT:    vmovsd %xmm1, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm0 = xmm0[1,0]
; CHECK-NEXT:    vmovsd %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %ymm1
; CHECK-NEXT:    vextractf128 $1, %ymm1, %xmm0
; CHECK-NEXT:    vmovaps %xmm0, %xmm2
; CHECK-NEXT:    vmovsd %xmm2, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    # kill: def $xmm1 killed $xmm1 killed $ymm1
; CHECK-NEXT:    vmovaps %xmm1, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; CHECK-NEXT:    vmovsd %xmm1, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %zmm4
; CHECK-NEXT:    vmovaps %zmm4, {{[-0-9]+}}(%r{{[sb]}}p) # 64-byte Spill
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %zmm1
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %zmm2
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %zmm3
; CHECK-NEXT:    vextractf32x4 $3, %zmm3, %xmm15
; CHECK-NEXT:    vmovaps %xmm15, %xmm5
; CHECK-NEXT:    vmovsd %xmm5, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vextractf32x4 $2, %zmm3, %xmm14
; CHECK-NEXT:    vmovaps %xmm14, %xmm5
; CHECK-NEXT:    vmovsd %xmm5, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vmovaps %xmm3, %xmm13
; CHECK-NEXT:    vmovaps %zmm13, %zmm31
; CHECK-NEXT:    vextractf32x4 $3, %zmm2, %xmm12
; CHECK-NEXT:    vmovaps %zmm12, %zmm30
; CHECK-NEXT:    vextractf32x4 $2, %zmm2, %xmm11
; CHECK-NEXT:    vmovaps %zmm11, %zmm29
; CHECK-NEXT:    vmovaps %xmm2, %xmm10
; CHECK-NEXT:    vmovaps %zmm10, %zmm28
; CHECK-NEXT:    vextractf32x4 $3, %zmm1, %xmm9
; CHECK-NEXT:    vmovaps %zmm9, %zmm27
; CHECK-NEXT:    vextractf32x4 $2, %zmm1, %xmm8
; CHECK-NEXT:    vmovaps %zmm8, %zmm26
; CHECK-NEXT:    vmovaps %xmm1, %xmm7
; CHECK-NEXT:    vmovaps %zmm7, %zmm25
; CHECK-NEXT:    vextractf32x4 $3, %zmm4, %xmm6
; CHECK-NEXT:    vmovaps %zmm6, %zmm24
; CHECK-NEXT:    vextractf32x4 $2, %zmm4, %xmm5
; CHECK-NEXT:    vmovaps %zmm5, %zmm23
; CHECK-NEXT:    vmovaps %zmm4, %zmm22
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm0 = xmm0[1,0]
; CHECK-NEXT:    vmovaps %zmm0, %zmm21
; CHECK-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm0 = xmm0[1,0]
; CHECK-NEXT:    vmovaps %zmm0, %zmm20
; CHECK-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 # 64-byte Reload
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm15 = xmm15[1,0]
; CHECK-NEXT:    vmovaps %zmm15, %zmm19
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm14 = xmm14[1,0]
; CHECK-NEXT:    vmovaps %zmm14, %zmm18
; CHECK-NEXT:    # kill: def $ymm3 killed $ymm3 killed $zmm3
; CHECK-NEXT:    vextractf128 $1, %ymm3, %xmm3
; CHECK-NEXT:    vmovaps %zmm3, %zmm17
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm13 = xmm13[1,0]
; CHECK-NEXT:    vmovaps %zmm13, %zmm16
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm15 = xmm12[1,0]
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm14 = xmm11[1,0]
; CHECK-NEXT:    # kill: def $ymm2 killed $ymm2 killed $zmm2
; CHECK-NEXT:    vextractf128 $1, %ymm2, %xmm2
; CHECK-NEXT:    vmovaps %xmm2, %xmm13
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm12 = xmm10[1,0]
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm11 = xmm9[1,0]
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm10 = xmm8[1,0]
; CHECK-NEXT:    # kill: def $ymm1 killed $ymm1 killed $zmm1
; CHECK-NEXT:    vextractf128 $1, %ymm1, %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm9
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm8 = xmm7[1,0]
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm7 = xmm6[1,0]
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm6 = xmm5[1,0]
; CHECK-NEXT:    # kill: def $ymm0 killed $ymm0 killed $zmm0
; CHECK-NEXT:    vextractf128 $1, %ymm0, %xmm0
; CHECK-NEXT:    vmovaps %xmm0, %xmm5
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm4 = xmm4[1,0]
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm3 = xmm3[1,0]
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm2 = xmm2[1,0]
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm1 = xmm1[1,0]
; CHECK-NEXT:    vpermilpd {{.*#+}} xmm0 = xmm0[1,0]
; CHECK-NEXT:    vmovsd %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vmovsd {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 8-byte Reload
; CHECK-NEXT:    # xmm0 = mem[0],zero
; CHECK-NEXT:    vmovsd {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 8-byte Reload
; CHECK-NEXT:    # xmm0 = mem[0],zero
; CHECK-NEXT:    vmovsd {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 8-byte Reload
; CHECK-NEXT:    # xmm0 = mem[0],zero
; CHECK-NEXT:    vmovsd {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 8-byte Reload
; CHECK-NEXT:    # xmm0 = mem[0],zero
; CHECK-NEXT:    vmovsd {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 8-byte Reload
; CHECK-NEXT:    # xmm0 = mem[0],zero
; CHECK-NEXT:    vmovsd {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 8-byte Reload
; CHECK-NEXT:    # xmm0 = mem[0],zero
; CHECK-NEXT:    vmovsd {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 8-byte Reload
; CHECK-NEXT:    # xmm0 = mem[0],zero
; CHECK-NEXT:    movq %rbp, %rsp
; CHECK-NEXT:    popq %rbp
; CHECK-NEXT:    .cfi_def_cfa %rsp, 8
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %v = call fastcc <38 x double> @test()
  %v.0 = extractelement <38 x double> %v, i32 0
  ret void
}

